/**
 * 
 */
package dz.minagri.stat.comp.form;


import java.time.LocalDate;
import java.util.EnumSet;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation.Scope;

import com.vaadin.annotations.PropertyId;
import com.vaadin.data.BeanValidationBinder;
import com.vaadin.data.Binder;
import com.vaadin.event.ShortcutAction;
import com.vaadin.server.FontAwesome;
import com.vaadin.spring.annotation.SpringComponent;
import com.vaadin.spring.annotation.UIScope;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.DateField;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.NativeSelect;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.ValoTheme;

import dz.minagri.stat.model.Exploitant;
import dz.minagri.stat.model.Exploitant.ExploitantStatus;
import dz.minagri.stat.model.Exploitant.Gender;
import dz.minagri.stat.repositories.ExploitantRepository;

/**
 * @author bellal djamel
 *
 */
//@SpringComponent
//@UIScope
//@SpringComponent
//@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
public class ExploitantForm extends GridLayout{

	/**
	 * 
	 */
//	public ExploitantForm() {
//		// TODO Auto-generated constructor stub
//	}

	/**
	 * 
	 */
	private static final long serialVersionUID = 5575244060050692409L;

	@Autowired
	private  ExploitantRepository expRepo;
	
	@Autowired
	private Exploitant exploitant;
	
	@PropertyId("firstname")
	public final TextField firstnameField = new TextField();
	
	@PropertyId("lastname")
	private final TextField lastnameField = new TextField();

	@PropertyId("nationalNumber")
	private final TextField nationalNumber = new TextField();
	
	@PropertyId("gender")
	private final NativeSelect<Gender> gender = new NativeSelect<Gender>();

	@PropertyId("exploitantStatus")
	private final NativeSelect<ExploitantStatus> exploitantStatus = new NativeSelect<ExploitantStatus>();
	
	
	@PropertyId("birthday")
	private final DateField birthday = new DateField();
	
	@PropertyId("registrationDate")
	private final DateField registrationDate = new DateField();
	
	
	@PropertyId("title")
	private final ComboBox titleSelection = new ComboBox();
	
	Binder<Exploitant> expolBinder = new BeanValidationBinder<>(Exploitant.class);
	Button save = new Button("Save", FontAwesome.SAVE);
	Button cancel = new Button("Cancel");
	Button delete = new Button("Delete", FontAwesome.TRASH_O);
	CssLayout actions = new CssLayout(save, cancel, delete);
	
//	 @PostConstruct
//	    private void init() {
	
		 public ExploitantForm() {
			 super(3,8); 
		gender.setItems(EnumSet.allOf(Gender.class));
		exploitantStatus.setItems(EnumSet.allOf(ExploitantStatus.class));

		lastnameField.setPlaceholder("lastname");
		
		actions.setStyleName(ValoTheme.LAYOUT_COMPONENT_GROUP);
		save.setStyleName(ValoTheme.BUTTON_PRIMARY);
		save.setClickShortcut(ShortcutAction.KeyCode.ENTER);
		firstnameField.setPlaceholder("first name");
		
		// wire action buttons to save, delete and reset
				save.addClickListener(e -> expRepo.save(exploitant));
				delete.addClickListener(e -> expRepo.delete(exploitant));
				cancel.addClickListener(e -> editExploitant(exploitant));
				setVisible(false);
		addComponent(firstnameField);
		addComponent(lastnameField);
		addComponent(nationalNumber);
		addComponent(gender);
		addComponent(exploitantStatus);
		addComponent(birthday);
		addComponent(registrationDate);
		addComponent(actions);
		setMargin(true);
		setSpacing(true);
//		 bind using naming convention
		expolBinder.bindInstanceFields(this);
		
	}
	/**
	 * @param exploitant
	 * @return
	 */
	private void editExploitant(Exploitant c) {
		
		if (c == null) {
			setVisible(false);
			return;
		}
		final boolean persisted = c.getId() != null;
		if (persisted) {
			// Find fresh entity for editing
			exploitant = expRepo.findOne(c.getId());
		}
		else {
			exploitant = c;
		}
		
		cancel.setVisible(persisted);
		// Bind customer properties to similarly named fields
				// Could also use annotation or "manual binding" or programmatically
				// moving values from fields to entities before saving
		expolBinder.setBean(exploitant);

				setVisible(true);
				// A hack to ensure the whole form is visible
				save.focus();
				// Select all text in firstName field automatically
				firstnameField.selectAll();
			}

			public void setChangeHandler(ChangeHandler h) {
				// ChangeHandler is notified when either save or delete
				// is clicked
				save.addClickListener(e -> h.onChange());
				delete.addClickListener(e -> h.onChange());
			}

	public interface ChangeHandler {

		void onChange();
	}
	

}
