package dz.minagri.stat.model;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Version;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import dz.minagri.stat.enumeration.EtatExploitation;
import dz.minagri.stat.enumeration.EtatMauvHerb;
import dz.minagri.stat.enumeration.TypeExploitation;
import dz.minagri.stat.util.Identifiable;

@Entity
@Table(name = "exploitation")
public class Exploitation extends Identifiable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -4259120820891043481L;
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private Long id;

	@Version
	private int version;

	@ManyToMany( fetch = FetchType.EAGER, cascade = CascadeType.ALL)
//	@ManyToMany( fetch = FetchType.EAGER, cascade = CascadeType.ALL)
//	@Fetch(FetchMode.SELECT) to avoid the lazyinitException 
	@Fetch(FetchMode.SELECT)
//	@ManyToMany(cascade={CascadeType.PERSIST, CascadeType.ALL},
//			targetEntity=Exploitant.class)
	@JoinTable(name="exploitation_exploitant",
	joinColumns=
	@JoinColumn(name="exploitation_id", referencedColumnName="id"),
	inverseJoinColumns=
	@JoinColumn(name="exploitant_id", referencedColumnName="id")
			)
	private List<Exploitant> exploitans =new ArrayList<Exploitant>();

	@Column(name = "nom", nullable = true)
	private String nom;

	@Column(name = "surface", nullable = true)
	private String surface;

	@Column(name = "lieuDit", nullable = true)
	private String lieuDit;

	@ManyToOne
	@JoinColumn(name = "zone_id", nullable = false)
	private Zone zone;
	
	@OneToMany(mappedBy = "exploitation",fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	private List<ProductionParcel> productionParceles;
	
	@OneToMany(mappedBy = "exploitation", cascade = CascadeType.ALL)
	@Fetch(FetchMode.SUBSELECT)
	private List<ExploitationGlobalAspect> exploitationGlobalAspests;
	
	@OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "address_id", nullable = true)
	private Adresse address;
	
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "exploitation", cascade = CascadeType.ALL)
	@Fetch(FetchMode.SUBSELECT)
	private List<Rga> rgaL = new ArrayList<>();

	/**
	 * @return the rgaL
	 */
	public List<Rga> getRgaL() {
		return rgaL;
	}

	/**
	 * @param rgaL the rgaL to set
	 */
	public void setRgaL(List<Rga> rgaL) {
		this.rgaL = rgaL;
	}

	@Enumerated(EnumType.STRING)
	private EtatExploitation etatexploitation;
	
	@Enumerated(EnumType.STRING)
	private TypeExploitation typeExploitation;
	
	@Column(name = "dLat", nullable = true,unique =true)
	private Double dLat;
	
	@Column(name = "dLon", nullable = true,unique =true)
	private Double dLon;
	
	@Column(name = "registration_date",columnDefinition = "DATE")
	private LocalDate registrationDate;
	private String description;

	public Exploitation() {
		super();
	}

	/**
	 * @return the version
	 */
	public int getVersion() {
		return version;
	}

	/**
	 * @param version the version to set
	 */
	public void setVersion(int version) {
		this.version = version;
	}

	/**
	 * @return the description
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * @param description the description to set
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * @return the dLat
	 */
	public Double getdLat() {
		return dLat;
	}

	/**
	 * @param dLat the dLat to set
	 */
	public void setdLat(Double dLat) {
		this.dLat = dLat;
	}

	/**
	 * @return the dLon
	 */
	public Double getdLon() {
		return dLon;
	}

	/**
	 * @param dLon the dLon to set
	 */
	public void setdLon(Double dLon) {
		this.dLon = dLon;
	}

	public List<Exploitant> getExploitans() {
		return exploitans;
	}

	public void setExploitans(List<Exploitant> exploitans) {
		this.exploitans = exploitans;
	}

	public Zone getZone() {
		return zone;
	}

	public void setZone(Zone zone) {
		this.zone = zone;
	}


	public Long getId() {
		return id;
	}

	public String getNom() {
		return nom;
	}


	public void setNom(String nom) {
		this.nom = nom;
	}


	public String getSurface() {
		return surface;
	}


	public void setSurface(String surface) {
		this.surface = surface;
	}


	public String getLieuDit() {
		return lieuDit;
	}


	public void setLieuDit(String lieuDit) {
		this.lieuDit = lieuDit;
	}


	public Adresse getAddress() {
		return address;
	}


	public void setAddress(Adresse address) {
		this.address = address;
	}


	/**
	 * @return the etatexploitation
	 */
	public EtatExploitation getEtatexploitation() {
		return etatexploitation;
	}

	/**
	 * @param etatexploitation the etatexploitation to set
	 */
	public void setEtatexploitation(EtatExploitation etatexploitation) {
		this.etatexploitation = etatexploitation;
	}
	public void addProductionParcel(ProductionParcel  productionParcel) {
		productionParcel.setExploitation(this);
		productionParceles.add(productionParcel);
	}
	public void addRga(Rga  rga) {
		rga.setExploitation(this);
		rgaL.add(rga);
	} 
	public void AddExploitationGlobalAspect(ExploitationGlobalAspect ega) {
		ega.setExploitation(this);
		exploitationGlobalAspests.add(ega);
	}
/**
	 * @return the productionParceles
	 */
	public List<ProductionParcel> getProductionParceles() {
		return productionParceles;
	}

	/**
	 * @param productionParceles the productionParceles to set
	 */
	public void setProductionParceles(List<ProductionParcel> productionParceles) {
		this.productionParceles = productionParceles;
	}

	/**
	 * @return the typeExploitation
	 */
	public TypeExploitation getTypeExploitation() {
		return typeExploitation;
	}

	/**
	 * @param typeExploitation the typeExploitation to set
	 */
	public void setTypeExploitation(TypeExploitation typeExploitation) {
		this.typeExploitation = typeExploitation;
	}

	//	public void addExploitant(Exploitant  exploitant) {
//		exploitant.setExploitations(this);
//		productionParceles.add(Exploitant);
//	}
	
	/**
	 * @return the exploitationGlobalAspests
	 */
	public List<ExploitationGlobalAspect> getExploitationGlobalAspests() {
		return exploitationGlobalAspests;
	}

	/**
	 * @param exploitationGlobalAspests the exploitationGlobalAspests to set
	 */
	public void setExploitationGlobalAspests(List<ExploitationGlobalAspect> exploitationGlobalAspests) {
		this.exploitationGlobalAspests = exploitationGlobalAspests;
	}

	/**
	 * @return the registrationDate
	 */
	public LocalDate getRegistrationDate() {
		return registrationDate;
	}

	/**
	 * @param registrationDate the registrationDate to set
	 */
	public void setRegistrationDate(LocalDate registrationDate) {
		this.registrationDate = registrationDate;
	}

	@Override
	public Class<?> getConcreteClass() {
		return Exploitation.class;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "Exploitation [id=" + id + ", exploitans=" + exploitans + ", nom=" + nom + ", surface=" + surface
				+ ", lieuDit=" + lieuDit + ", zone=" + zone + ", exploitationGlobalAspests=" + exploitationGlobalAspests
				+ ", address=" + address + ", etatexploitation=" + etatexploitation + ", typeExploitation="
				+ typeExploitation + ", dLat=" + dLat + ", dLon=" + dLon + "]";
	}

}
